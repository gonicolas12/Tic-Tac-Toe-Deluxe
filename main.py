"""
Point d'entr√©e principal du jeu Tic Tac Toe Ultra-Moderne avec Drag & Drop
"""

import sys
import os
import tkinter as tk

# Ajouter le r√©pertoire du projet au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.game import GameLogic
from src.modern_ui import ModernGameUI
from src.enhanced_menu import EnhancedGameMenu
from config.settings import COLORS

# D√©sactiver les anciens modules qui pourraient causer des conflits
sys.modules['src.ui'] = None
sys.modules['src.menu'] = None

# Variables globales pour la gestion des fen√™tres
app_running = False
current_window = None
transition_window = None
root = None

def create_transition_window():
    """Cr√©e une fen√™tre de transition couvrant tout l'√©cran pour des transitions fluides"""
    global transition_window
    global root
    
    print("üîÑ Cr√©ation d'une fen√™tre de transition...")
    
    # Nettoyer toute ancienne fen√™tre de transition
    if transition_window is not None:
        try:
            if transition_window.winfo_exists():
                transition_window.destroy()
                print("‚úì Ancienne fen√™tre de transition ferm√©e")
        except Exception as e:
            print(f"Note: Erreur lors de la fermeture de l'ancienne fen√™tre de transition: {e}")
    
    try:
        # Utiliser toujours la fen√™tre racine comme parent si disponible
        if root and root.winfo_exists():
            transition_window = tk.Toplevel(root)
            print("‚úì Fen√™tre de transition cr√©√©e √† partir de la racine")
        else:
            print("‚ö†Ô∏è Fen√™tre racine non disponible pour la transition")
            # Cr√©er une fen√™tre de transition ind√©pendante
            transition_window = tk.Toplevel()
        
        # Configurer la fen√™tre de transition pour une couverture totale
        transition_window.title("TIC TAC TOE DELUXE - Transition")
        transition_window.attributes('-fullscreen', True)
        transition_window.attributes('-topmost', True)
        transition_window.configure(bg=COLORS['background'])
        transition_window.overrideredirect(True)  # Enlever la barre de titre pour plus de fluidit√©
        
        # Forcer la fen√™tre √† couvrir tout l'√©cran imm√©diatement
        transition_window.geometry(f"{transition_window.winfo_screenwidth()}x{transition_window.winfo_screenheight()}+0+0")
        
        # Ne pas permettre de fermer avec le bouton X
        transition_window.protocol("WM_DELETE_WINDOW", lambda: None)
        
        # Ajouter un effet visuel simple
        canvas = tk.Canvas(
            transition_window,
            bg=COLORS['background'],
            highlightthickness=0,
            width=transition_window.winfo_screenwidth(),
            height=transition_window.winfo_screenheight()
        )
        canvas.pack(fill='both', expand=True)
        
        # Texte principal
        canvas.create_text(
            transition_window.winfo_screenwidth() // 2,
            transition_window.winfo_screenheight() // 2,
            text="‚ú® TIC TAC TOE DELUXE ‚ú®",
            font=('Segoe UI', 36, 'bold'),
            fill=COLORS['accent'],
            anchor='center'
        )
        
        # Texte de chargement
        canvas.create_text(
            transition_window.winfo_screenwidth() // 2,
            transition_window.winfo_screenheight() // 2 + 60,
            text="Chargement...",
            font=('Segoe UI', 16, 'italic'),
            fill=COLORS['accent_secondary'],
            anchor='center'
        )
        
        # Mettre √† jour plusieurs fois pour s'assurer que la fen√™tre est bien affich√©e
        transition_window.update_idletasks()
        transition_window.update()
        transition_window.focus_force()  # S'assurer que la fen√™tre a le focus
        transition_window.lift()  # S'assurer qu'elle est au premier plan
        
        # Double v√©rification que la fen√™tre couvre bien tout l'√©cran
        transition_window.attributes('-topmost', True)
        transition_window.update()
        
        print("‚úì Fen√™tre de transition affich√©e et optimis√©e")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la cr√©ation de la fen√™tre de transition: {e}")
        return None
    
    return transition_window

def close_transition_window(delay=500):
    """Ferme la fen√™tre de transition apr√®s un d√©lai"""
    global transition_window
    
    if transition_window is not None:
        try:
            if transition_window.winfo_exists():
                print(f"üîÑ Pr√©paration de la fermeture de la fen√™tre de transition (d√©lai: {delay}ms)")
                
                # S'assurer que la fen√™tre de transition n'est plus au premier plan
                transition_window.attributes('-topmost', False)
                transition_window.lower()  # Mettre la fen√™tre en arri√®re-plan
                
                # Fonction de nettoyage avec transition fluide
                def close_window():
                    global transition_window
                    try:
                        if transition_window and transition_window.winfo_exists():
                            # Transition douce : d'abord perdre le focus topmost
                            transition_window.attributes('-topmost', False)
                            transition_window.update_idletasks()
                            
                            # Ensuite la cacher progressivement
                            transition_window.withdraw()
                            transition_window.update_idletasks()
                            
                            # Finalement la d√©truire
                            transition_window.destroy()
                            print("‚úì Fen√™tre de transition ferm√©e avec transition fluide")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erreur lors de la fermeture de la transition: {e}")
                    finally:
                        # Toujours r√©initialiser la r√©f√©rence
                        transition_window = None
                
                # Programmer la fermeture apr√®s le d√©lai
                transition_window.after(delay, close_window)
            else:
                # La fen√™tre n'existe plus
                transition_window = None
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la fermeture de la fen√™tre de transition: {e}")
            transition_window = None

# Variables globales pour la gestion des fen√™tres
app_running = False
current_window = None  # R√©f√©rence √† la fen√™tre active actuelle

def start_game(game_mode='pvp', ai_level='medium'):
    """Lance le jeu avec le mode s√©lectionn√©"""
    global app_running
    global current_window
    global root
    global transition_window
    
    # Marquer l'application comme en cours d'ex√©cution
    app_running = True
    print(f"‚öôÔ∏è D√©marrage du jeu en mode {game_mode}, niveau IA: {ai_level}")
    
    try:
        # Ne pas cr√©er une nouvelle transition si une transition existe d√©j√†
        if transition_window is None:
            # Cr√©er une transition visuelle seulement si aucune n'existe
            create_transition_window()
            print("üîÑ Nouvelle transition cr√©√©e pour le jeu")
        else:
            print("‚ôªÔ∏è R√©utilisation de la transition existante pour le jeu")
        
        # Utiliser la fen√™tre racine globale qui a √©t√© cr√©√©e au d√©marrage de l'application
        game_window = root
        
        # V√©rifier que la fen√™tre existe encore
        if not game_window or not game_window.winfo_exists():
            print("‚ö†Ô∏è Fen√™tre racine perdue, cr√©ation d'une nouvelle fen√™tre")
            # Recr√©er une fen√™tre racine si elle a √©t√© d√©truite
            game_window = tk.Tk()
            root = game_window
        else:
            # Nettoyer tous les widgets existants
            print("‚ôªÔ∏è R√©utilisation de la fen√™tre racine pour le jeu")
            for widget in game_window.winfo_children():
                try:
                    # Exclure la fen√™tre de transition si elle existe
                    if transition_window is not None and widget != transition_window:
                        widget.destroy()
                except Exception as e:
                    print(f"Note: Erreur lors du nettoyage d'un widget: {e}")
        
        # S'assurer que la fen√™tre est visible et au premier plan
        game_window.deiconify()
        current_window = game_window
        
        # Configurer la fen√™tre
        game_window.title("TIC TAC TOE DELUXE - Jeu")
        game_window.attributes('-fullscreen', True)
        game_window.configure(bg=COLORS['background'])
        
        # Cr√©er une nouvelle instance de logique de jeu
        game_logic = GameLogic()
        
        # Fonction pour retourner au menu de fa√ßon robuste
        def back_to_menu():
            print("‚Ü©Ô∏è Retour au menu principal...")
            global app_running
            global current_window
            global transition_window
            
            # Afficher la transition AVANT de masquer le jeu
            create_transition_window()
            
            # Attendre que la transition soit bien affich√©e avant de masquer le jeu
            def hide_game_after_transition():
                # R√©initialiser l'√©tat de l'application
                global app_running
                app_running = False
                
                # Masquer la fen√™tre de jeu mais NE PAS LA D√âTRUIRE
                try:
                    # Masquer le contenu actuel
                    for widget in game_window.winfo_children():
                        if transition_window is None or widget != transition_window:
                            widget.pack_forget()
                    
                    # Ne pas fermer la fen√™tre, juste la masquer temporairement
                    game_window.withdraw()
                    print("‚úì Interface de jeu masqu√©e apr√®s transition")
                except Exception as e:
                    print(f"Note: {e}")
            
            # Attendre un petit d√©lai pour que la transition soit bien visible
            root.after(150, hide_game_after_transition)
            
            # Lancement diff√©r√© du menu pour laisser le temps √† la transition
            def safe_start_menu():
                # Lancer le menu qui r√©utilisera la m√™me fen√™tre racine
                try:
                    print("üîÑ Chargement du menu principal...")
                    start_menu()
                    
                    # La fen√™tre de transition sera ferm√©e par start_menu
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur lors du retour au menu: {e}")
                    # En cas d'erreur, fermer au moins la transition
                    close_transition_window(100)

            if root and root.winfo_exists():
                root.after(500, safe_start_menu)
            else:
                # Si la racine n'existe plus (cas improbable), appel direct
                safe_start_menu()
        
        # Cr√©er l'interface moderne
        game_ui = ModernGameUI(
            master=game_window,
            game_logic=game_logic, 
            game_mode=game_mode,
            ai_level=ai_level,
            on_return_menu=back_to_menu
        )
        
        # Configurer et lancer le jeu
        print("üéÆ Configuration de l'interface de jeu...")
        game_ui.setup_ui()
        print("‚úÖ Jeu pr√™t - Mode:", "JOUEUR vs IA" if game_mode == "ai" else "JOUEUR vs JOUEUR")
        print("-" * 50)
        
        # Amener la fen√™tre du jeu au premier plan, mais pas encore visible
        game_window.update()
        
        # Fermer la transition APR√àS que le jeu soit pr√™t
        def show_game_window():
            # S'assurer que la fen√™tre de jeu est au premier plan
            game_window.lift()
            game_window.attributes('-topmost', True)
            game_window.after(10, lambda: game_window.attributes('-topmost', False))
            game_window.focus_force()  # Donner le focus au jeu
            print("‚úì Fen√™tre de jeu au premier plan")
        
        # Fermer la transition ET montrer le jeu apr√®s avec timing optimis√©
        if transition_window and transition_window.winfo_exists():
            # D'abord programmer l'affichage du jeu avec un d√©lai suffisant
            transition_window.after(800, show_game_window)
            # Puis fermer la transition avec un d√©lai encore plus long
            close_transition_window(1200)
        else:
            # Si pas de transition, montrer le jeu directement
            show_game_window()
            
        print("‚úì Interface de jeu configur√©e et affich√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement du jeu: {e}")
        app_running = False

def start_menu():
    """Lance le menu principal de fa√ßon robuste"""
    global app_running
    global current_window
    global root
    global transition_window
    
    # Emp√™cher les lancements multiples
    if app_running:
        print("‚ö†Ô∏è Application d√©j√† en cours d'ex√©cution, menu ignor√©")
        return
    
    app_running = True
    print("üöÄ D√©marrage du menu principal...")
    
    # Utiliser toujours la fen√™tre racine globale
    menu_window = root
    
    # V√©rifier que la fen√™tre root existe bien
    if not menu_window or not menu_window.winfo_exists():
        print("‚ö†Ô∏è Fen√™tre racine non disponible, cr√©ation d'une nouvelle fen√™tre")
        menu_window = tk.Tk()
        root = menu_window  # Mettre √† jour la r√©f√©rence globale
    
    # Nettoyer tous les widgets existants
    for widget in menu_window.winfo_children():
        # Ne pas supprimer la fen√™tre de transition si elle existe
        if transition_window is None or widget != transition_window:
            try:
                widget.destroy()
            except Exception as e:
                print(f"Note lors du nettoyage: {e}")
    
    # Configurer la fen√™tre
    menu_window.deiconify()  # S'assurer que la fen√™tre est visible
    menu_window.title("TIC TAC TOE DELUXE - Menu Principal")
    menu_window.attributes('-fullscreen', True)
    menu_window.configure(bg=COLORS['background'])
    
    # Mettre √† jour la r√©f√©rence √† la fen√™tre courante
    current_window = menu_window
    print("‚úì Fen√™tre du menu principal pr√©par√©e")
    
    # D√©finir un gestionnaire d'exception pour capturer les erreurs Tk
    def handle_tk_error(exc, val, tb):
        print(f"‚ùå Erreur Tkinter: {val}")
        sys.__excepthook__(exc, val, tb)
    
    # Installer le gestionnaire d'erreurs
    sys.excepthook = handle_tk_error
    
    # Fonction de callback pour lancer le jeu de fa√ßon robuste
    def start_game_callback(game_mode, ai_level):
        global app_running
        global current_window
        
        print(f"‚öôÔ∏è Pr√©paration du jeu en mode {game_mode.upper()}...")
        
        # Important: stocker les param√®tres dans des variables locales
        game_mode_copy = game_mode
        ai_level_copy = ai_level
        
        # Enregistrer une r√©f√©rence locale √† la fen√™tre
        local_window = menu_window
        
        # R√©initialiser l'√©tat global et pr√©parer la transition
        try:
            # Afficher la fen√™tre de transition AVANT de cacher le menu
            create_transition_window()
            
            # Attendre que la transition soit bien affich√©e avant de continuer
            def hide_menu_after_transition():
                # Maintenant on peut cacher la fen√™tre du menu
                if local_window.winfo_exists():
                    local_window.withdraw()
                print("‚úì Menu masqu√© apr√®s affichage de la transition")
                
                # R√©initialiser l'√©tat global 
                global app_running
                app_running = False
            
            # Attendre un petit d√©lai pour que la transition soit bien visible
            root.after(100, hide_menu_after_transition)
            
            # Fonction pour lancer le jeu de fa√ßon diff√©r√©e
            def safe_start_game():
                global current_window, app_running  # D√©clarer les variables comme globales
                try:
                    print("‚úì Mode s√©lectionn√©: " + game_mode_copy)
                    print("‚úì Lancement du jeu...")
                    
                    # Ne pas d√©truire la fen√™tre, juste nettoyer son contenu
                    if local_window.winfo_exists():
                        # Cacher les widgets existants au lieu de d√©truire la fen√™tre
                        for widget in local_window.winfo_children():
                            # Ne pas d√©truire la fen√™tre de transition
                            if transition_window is None or widget != transition_window:
                                widget.destroy()
                    
                    # Lancer le jeu, on r√©utilise la m√™me fen√™tre
                    start_game(game_mode_copy, ai_level_copy)
                except Exception as e:
                    print(f"‚ùå Erreur lors du lancement du jeu: {e}")
                    app_running = False
                    
            # Utiliser un d√©lai plus long pour laisser voir la transition
            root.after(1000, safe_start_game)
            
        except Exception as e:
            print(f"‚ùå Erreur pendant la transition menu -> jeu: {e}")
            app_running = False
    
    # Cr√©er le menu avec callback vers start_game
    menu = EnhancedGameMenu(
        master=menu_window,
        on_game_start=start_game_callback
    )
    
    # Configurer le menu
    menu.setup_ui()
    menu_window.protocol("WM_DELETE_WINDOW", lambda: exit_app(menu_window))
    menu_window.update()
    
    # Fonction pour afficher le menu apr√®s la transition
    def show_menu_window():
        # S'assurer que la fen√™tre de menu est au premier plan
        menu_window.lift()
        menu_window.attributes('-topmost', True)
        menu_window.after(10, lambda: menu_window.attributes('-topmost', False))
        menu_window.focus_force()  # Donner le focus au menu
        print("‚úì Menu principal au premier plan")
    
    # Fermer la transition ET montrer le menu apr√®s avec timing optimis√©
    if transition_window and transition_window.winfo_exists():
        # D'abord programmer l'affichage du menu apr√®s un d√©lai
        transition_window.after(400, show_menu_window)
        # Puis fermer la transition avec un d√©lai plus long
        close_transition_window(700)
    else:
        # Si pas de transition, montrer le menu directement
        show_menu_window()
    
    print("‚úì Interface de menu configur√©e et affich√©e")

def exit_app(window):
    """Quitte l'application proprement"""
    global app_running
    global current_window
    
    print("üö™ Fermeture de l'application...")
    app_running = False
    
    # Capture de toutes les fen√™tres Tkinter actives
    all_windows = []
    if window:
        all_windows.append(window)
    if current_window and current_window != window:
        all_windows.append(current_window)
        
    # Fermeture propre de toutes les fen√™tres
    for win in all_windows:
        try:
            if win and win.winfo_exists():
                print(f"Fermeture de la fen√™tre {win}")
                win.withdraw()  # Cacher d'abord
                win.update()    # Mettre √† jour pour appliquer withdraw
                win.destroy()   # Puis d√©truire
        except Exception as e:
            print(f"Note lors de la fermeture: {e}")
    
    # R√©initialiser l'√©tat global
    current_window = None
    
    # Forcer le nettoyage des ressources
    import gc
    gc.collect()
    
    # Quitter l'application
    print("Au revoir! üëã")
    sys.exit(0)
        
def main():
    """Fonction principale du jeu avec gestion d'erreurs robuste"""
    # Configurer un gestionnaire d'exception global
    def global_exception_handler(exc_type, exc_val, exc_tb):
        global app_running, current_window  # D√©clarer les variables globales
        print(f"‚ùå ERREUR CRITIQUE: {exc_type.__name__}: {exc_val}")
        import traceback
        traceback.print_exception(exc_type, exc_val, exc_tb)
        
        # Nettoyage des ressources
        app_running = False
        if current_window:
            try:
                if current_window.winfo_exists():
                    current_window.destroy()
            except:
                pass
            current_window = None
            
        sys.exit(1)
    
    # Installer le gestionnaire d'exceptions
    sys.excepthook = global_exception_handler
    
    try:
        # Lancer le menu principal
        start_menu()
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement du jeu: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

def init_app():
    """Initialisation compl√®te de l'application avec gestion am√©lior√©e du d√©marrage"""
    global current_window, app_running, transition_window, root
    
    print("üéÆ Lancement du jeu Tic Tac Toe Ultra-Moderne...")
    print("üìÅ Architecture modulaire charg√©e")
    print("üé® Effets visuels et animations activ√©s")
    print("-" * 50)
    
    # R√©initialiser les variables globales
    app_running = False
    current_window = None
    transition_window = None
    
    try:
        print("üîÑ Cr√©ation de la fen√™tre principale...")
        # Cr√©er une fen√™tre racine unique pour toute l'application
        root = tk.Tk()
        root.withdraw()  # Masquer temporairement
        current_window = root  # D√©finir comme fen√™tre courante
        
        # Configurer la gestion des erreurs Tkinter
        def handle_tk_error(exc_type, exc_val, exc_tb):
            print(f"‚ùå Erreur Tkinter: {exc_val}")
            import traceback
            traceback.print_exception(exc_type, exc_val, exc_tb)
        
        # Installer le gestionnaire d'erreurs
        root.report_callback_exception = handle_tk_error
        
        # Cr√©er le splash screen
        print("üé® Cr√©ation du splash screen...")
        splash_window = tk.Toplevel(root)
        splash_window.title("TIC TAC TOE DELUXE - Chargement")
        splash_window.attributes('-fullscreen', True)
        splash_window.attributes('-topmost', True)
        splash_window.configure(bg=COLORS['background'])
        splash_window.protocol("WM_DELETE_WINDOW", lambda: None)
        
        # Cr√©er le contenu du splash screen
        splash_canvas = tk.Canvas(
            splash_window,
            bg=COLORS['background'],
            highlightthickness=0,
            width=splash_window.winfo_screenwidth(),
            height=splash_window.winfo_screenheight()
        )
        splash_canvas.pack(fill='both', expand=True)
        
        # Texte principal
        splash_canvas.create_text(
            splash_window.winfo_screenwidth() // 2,
            splash_window.winfo_screenheight() // 2,
            text="‚ú® TIC TAC TOE DELUXE ‚ú®",
            font=('Segoe UI', 36, 'bold'),
            fill=COLORS['accent'],
            anchor='center'
        )
        
        # Texte de chargement
        loading_text = splash_canvas.create_text(
            splash_window.winfo_screenwidth() // 2,
            splash_window.winfo_screenheight() // 2 + 60,
            text="Chargement...",
            font=('Segoe UI', 16, 'italic'),
            fill=COLORS['accent_secondary'],
            anchor='center'
        )
        
        # Afficher imm√©diatement
        splash_window.update()
        print("‚úì Splash screen affich√©")
        
        # Planifier le d√©marrage du menu principal de fa√ßon fluide
        def launch_menu():
            try:
                print("üöÄ Lancement du menu principal...")
                
                # Stocker le splash screen comme fen√™tre de transition pour une transition fluide
                global transition_window
                transition_window = splash_window
                
                # Lancer le menu qui fermera lui-m√™me la fen√™tre de transition
                # et assurera l'affichage fluide
                start_menu()
                
            except Exception as e:
                print(f"‚ùå Erreur au d√©marrage du menu: {e}")
                # En cas d'erreur, d√©truire le splash screen
                try:
                    splash_window.destroy()
                except:
                    pass
                import traceback
                traceback.print_exc()
        
        # Lancer le menu apr√®s un d√©lai
        root.after(1000, launch_menu)
        print("‚úì D√©marrage planifi√© avec succ√®s")
        
        # D√©marrer la boucle principale
        print("‚è≥ D√©marrage de la boucle principale Tkinter")
        root.mainloop()
        print("‚úì Fin de l'application")
        
    except Exception as e:
        print(f"‚ùå ERREUR FATALE: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    init_app()
