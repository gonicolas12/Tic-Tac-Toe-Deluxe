"""
Point d'entr√©e principal du jeu Tic Tac Toe Ultra-Moderne avec Drag & Drop
"""

import sys
import os
import tkinter as tk

# Ajouter le r√©pertoire du projet au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.game import GameLogic
from src.modern_ui import ModernGameUI
from src.enhanced_menu import EnhancedGameMenu
from config.settings import COLORS

# D√©sactiver les anciens modules qui pourraient causer des conflits
# Si d'autres fichiers importent ces modules, ils n'auront pas d'effet secondaire
sys.modules['src.ui'] = None
sys.modules['src.menu'] = None

# Variables globales pour la gestion des fen√™tres
app_running = False
current_window = None  # R√©f√©rence √† la fen√™tre active actuelle

def start_game(game_mode='pvp', ai_level='medium'):
    """Lance le jeu avec le mode s√©lectionn√©"""
    global app_running
    global current_window
    
    # Marquer l'application comme en cours d'ex√©cution
    app_running = True
    
    try:
        # D√©truire toute fen√™tre existante avant d'en cr√©er une nouvelle
        if current_window is not None:
            try:
                if current_window.winfo_exists():
                    current_window.destroy()
            except:
                pass  # Ignorer les erreurs
            current_window = None  # Effacer la r√©f√©rence
        
        # Cr√©er une nouvelle fen√™tre Tk pour le jeu
        game_window = tk.Tk()
        current_window = game_window  # Stocker la r√©f√©rence globale
        
        # Configurer la fen√™tre
        game_window.title("TIC TAC TOE DELUXE - Jeu")
        game_window.attributes('-fullscreen', True)
        game_window.configure(bg=COLORS['background'])
        
        # Cr√©er une nouvelle instance de logique de jeu
        game_logic = GameLogic()
        
        # Fonction pour retourner au menu de fa√ßon robuste
        def back_to_menu():
            print("‚Ü©Ô∏è Retour au menu principal...")
            global app_running
            global current_window
            
            # Indiquer que l'application n'est plus en cours d'ex√©cution
            app_running = False
            
            # Enregistrer une r√©f√©rence locale
            local_window = game_window
            
            # Cacher la fen√™tre pour feedback visuel imm√©diat
            try:
                if local_window.winfo_exists():
                    local_window.withdraw()
            except:
                pass
            
            # Utiliser after_idle pour diff√©rer le lancement du menu
            def safe_start_menu():
                global current_window  # D√©clarer la variable comme globale
                
                # Lancer d'abord le menu
                start_menu()
                
                # D√©truire la fen√™tre pr√©c√©dente de fa√ßon diff√©r√©e
                def cleanup():
                    global current_window  # D√©clarer la variable comme globale ici aussi
                    try:
                        if local_window.winfo_exists():
                            local_window.destroy()
                            print("‚úì Fen√™tre de jeu d√©truite avec succ√®s apr√®s retour au menu")
                    except:
                        pass
                
                # Utiliser un timer pour destruction diff√©r√©e
                import threading
                threading.Timer(0.5, cleanup).start()
            
            # Lancer le menu via after_idle ou directement si la fen√™tre n'existe plus
            try:
                if local_window and local_window.winfo_exists():
                    local_window.after_idle(safe_start_menu)
                else:
                    # Si la fen√™tre n'existe plus, lancer directement
                    safe_start_menu()
            except Exception as e:
                print(f"‚ö†Ô∏è Fallback pour lancer le menu: {e}")
                # Appel direct en cas d'erreur
                safe_start_menu()
        
        # Cr√©er l'interface moderne
        game_ui = ModernGameUI(
            master=game_window,
            game_logic=game_logic, 
            game_mode=game_mode,
            ai_level=ai_level,
            on_return_menu=back_to_menu
        )
        
        # Configurer et lancer le jeu
        print("üéÆ Configuration de l'interface de jeu...")
        game_ui.setup_ui()
        print("‚úÖ Jeu pr√™t - Mode:", "JOUEUR vs IA" if game_mode == "ai" else "JOUEUR vs JOUEUR")
        print("-" * 50)
        game_window.mainloop()
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement du jeu: {e}")
        app_running = False

def start_menu():
    """Lance le menu principal de fa√ßon robuste"""
    global app_running
    global current_window
    
    # Emp√™cher les lancements multiples
    if app_running:
        print("‚ö†Ô∏è Application d√©j√† en cours d'ex√©cution, menu ignor√©")
        return
    
    app_running = True
    print("üöÄ D√©marrage du menu principal...")
    
    # Fermer proprement toute fen√™tre existante
    if current_window is not None:
        try:
            if current_window.winfo_exists():
                print("üóëÔ∏è Fermeture d'une fen√™tre existante...")
                current_window.destroy()
        except:
            pass  # Ignorer les erreurs
        current_window = None
    
    # Cr√©er une nouvelle fen√™tre pour le menu
    menu_window = tk.Tk()
    current_window = menu_window  # Mise √† jour de la r√©f√©rence globale
    
    # D√©finir un gestionnaire d'exception pour capturer les erreurs Tk
    def handle_tk_error(exc, val, tb):
        print(f"‚ùå Erreur Tkinter: {val}")
        sys.__excepthook__(exc, val, tb)
    
    # Installer le gestionnaire d'erreurs
    sys.excepthook = handle_tk_error
    
    # Fonction de callback pour lancer le jeu de fa√ßon robuste
    def start_game_callback(game_mode, ai_level):
        global app_running
        global current_window
        
        print(f"‚öôÔ∏è Pr√©paration du jeu en mode {game_mode.upper()}...")
        
        # Important: stocker les param√®tres dans des variables locales
        game_mode_copy = game_mode
        ai_level_copy = ai_level
        
        # Enregistrer une r√©f√©rence locale √† la fen√™tre
        local_window = menu_window
        
        # R√©initialiser l'√©tat global et cacher la fen√™tre
        try:
            # Cacher la fen√™tre imm√©diatement pour feedback visuel
            if local_window.winfo_exists():
                local_window.withdraw()
            
            # R√©initialiser l'√©tat global 
            app_running = False
            
            # Fonction pour lancer le jeu de fa√ßon diff√©r√©e
            def safe_start_game():
                global current_window  # D√©clarer la variable comme globale ici aussi
                try:
                    # D√©truire la fen√™tre du menu
                    if local_window.winfo_exists():
                        local_window.destroy()
                    
                    # Effacer la r√©f√©rence globale
                    if current_window == local_window:
                        current_window = None
                        
                    # Lancer le jeu
                    print("üîÑ Lancement du jeu...")
                    start_game(game_mode_copy, ai_level_copy)
                except Exception as e:
                    print(f"‚ùå Erreur lors du lancement du jeu: {e}")
                    global app_running  # D√©clarer app_running comme globale
                    app_running = False
                    
            # Utiliser after_idle pour attendre que Tk ait fini de traiter les √©v√©nements
            local_window.after_idle(safe_start_game)
            
        except Exception as e:
            print(f"‚ùå Erreur pendant la transition menu -> jeu: {e}")
            app_running = False
    
    # Cr√©er le menu avec callback vers start_game
    menu = EnhancedGameMenu(
        master=menu_window,
        on_game_start=start_game_callback
    )
    
    # Configurer et lancer le menu
    menu.setup_ui()
    menu_window.protocol("WM_DELETE_WINDOW", lambda: exit_app(menu_window))
    menu_window.mainloop()

def exit_app(window):
    """Quitte l'application proprement"""
    global app_running
    global current_window
    
    print("üö™ Fermeture de l'application...")
    app_running = False
    
    # Capture de toutes les fen√™tres Tkinter actives
    all_windows = []
    if window:
        all_windows.append(window)
    if current_window and current_window != window:
        all_windows.append(current_window)
        
    # Fermeture propre de toutes les fen√™tres
    for win in all_windows:
        try:
            if win and win.winfo_exists():
                print(f"Fermeture de la fen√™tre {win}")
                win.withdraw()  # Cacher d'abord
                win.update()    # Mettre √† jour pour appliquer withdraw
                win.destroy()   # Puis d√©truire
        except Exception as e:
            print(f"Note lors de la fermeture: {e}")
    
    # R√©initialiser l'√©tat global
    current_window = None
    
    # Forcer le nettoyage des ressources
    import gc
    gc.collect()
    
    # Quitter l'application
    print("Au revoir! üëã")
    sys.exit(0)
        
def main():
    """Fonction principale du jeu avec gestion d'erreurs robuste"""
    # Configurer un gestionnaire d'exception global
    def global_exception_handler(exc_type, exc_val, exc_tb):
        global app_running, current_window  # D√©clarer les variables globales
        print(f"‚ùå ERREUR CRITIQUE: {exc_type.__name__}: {exc_val}")
        import traceback
        traceback.print_exception(exc_type, exc_val, exc_tb)
        
        # Nettoyage des ressources
        app_running = False
        if current_window:
            try:
                if current_window.winfo_exists():
                    current_window.destroy()
            except:
                pass
            current_window = None
            
        sys.exit(1)
    
    # Installer le gestionnaire d'exceptions
    sys.excepthook = global_exception_handler
    
    try:
        # Lancer le menu principal
        start_menu()
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement du jeu: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    print("üéÆ Lancement du jeu Tic Tac Toe Ultra-Moderne...")
    print("üìÅ Architecture modulaire charg√©e")
    print("üé® Effets visuels et animations activ√©s")
    print("üöÄ D√©marrage du menu principal avec drag & drop...")
    print("-" * 50)
    main()
